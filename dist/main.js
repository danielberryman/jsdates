/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// VARIABLES\nvar monthNames = ['Jan', 'Feb', 'Mar', 'April', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\nvar monthNums = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];\nvar dayNames = ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'];\nvar today = new Date();\nvar tMonName = monthNums[today.getMonth()];\nvar tDate = today.getDate();\nvar tDayName = dayNames[today.getDay()];\nvar tYear = today.getFullYear();\nvar tStr = tMonName + ' ' + tDate + ', ' + tYear;\nvar flashcards = [{\n  prompt: 'Return the current date as a Date object',\n  answers: ['new Date()']\n}, {\n  prompt: 'Return the current date as a String',\n  answers: ['Date()']\n}, {\n  prompt: \"Return the number of milliseconds in UTC elapsed since 1 January, 1970, 00:00:00 UTC (Today's date is: \".concat(tStr, \")\"),\n  answers: [\"Date.UTC(\".concat(tYear, \",\").concat(tMonName, \",\").concat(tDate, \")\")]\n}, {\n  prompt: \"Return the number of milliseconds in your timezone elapsed since 1 January, 1970, 00:00:00 UTC (Today's date is: \".concat(tStr, \")\"),\n  answers: [\"new Date(\".concat(tYear, \",\").concat(tMonName, \",\").concat(tDate, \").getTime()\"), 'Date.now()']\n}, {\n  prompt: \"Return the difference between the number of milliseconds elapsed since 1 January, 1970, 00:00:00 UTC \\n                between your timezone and UTC (Today's date is: \".concat(tStr, \")\"),\n  answers: [\"new Date(\".concat(tYear, \",\").concat(tMonName, \",\").concat(tDate, \").getTime() - Date.UTC(\").concat(tYear, \",\").concat(tMonName, \",\").concat(tDate, \")\")]\n}, {\n  prompt: 'Convert the number of milliseconds in UTC elapsed since 1 January, 1970, 00:00:00 UTC to a Date object',\n  answers: ['new Date(Date.now())']\n}, {\n  prompt: 'Convert the number of milliseconds in UTC elapsed since 1 January, 1970, 00:00:00 UTC to a String',\n  answers: ['Date(Date.now())']\n}];\nvar years = [1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021];\nvar dates = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];\nvar hrs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23];\nvar localtime = new Date();\nvar localtimeStr = \"Local: \".concat(tDayName, \", \").concat(tDate, \" \").concat(tYear, \" \").concat(localtime.toTimeString());\nvar utctime = new Date(Date.now());\nvar utctimeStr = 'UTC: ' + utctime.toUTCString();\nvar card = flashcards[0];\nvar cardIndex = flashcards.indexOf(card);\nvar answerEl;\nvar congratsEl;\nvar imgEl;\nvar incorrectEl;\nvar launchBtnEl;\nvar timestampBtnEl;\nvar practiceBtnEl;\nvar navBtns;\nvar localtimeEl;\nvar utctimeEl; // NAV SECTIONS\n\nvar launchSection;\nvar timestampSection;\nvar practiceSection;\nvar navSections; // NAV BTN/SECTION INDEXES\n\nvar launchIndex;\nvar timestampIndex;\nvar practiceIndex; // TIMESTAMP\n\nvar timestampGen;\nvar timestampPrompt;\nvar timestampQuestion;\nvar timestampInputYr;\nvar timestampInputMon;\nvar timestampInputDt;\nvar timestampInputHr;\n\nwindow.onload = function () {\n  init();\n};\n\nfunction init() {\n  setElementVars();\n  setElementProps();\n  launchQuiz();\n} // SETUP\n\n\nfunction setElementVars() {\n  answerEl = document.getElementById('answer');\n  congratsEl = document.getElementById('congrats');\n  imgEl = document.querySelector('img');\n  incorrectEl = document.getElementById('incorrect'); // NAV BTNS\n\n  launchBtnEl = document.getElementById('launch');\n  timestampBtnEl = document.getElementById('timestamp');\n  practiceBtnEl = document.getElementById('practice');\n  navBtns = [launchBtnEl, timestampBtnEl, practiceBtnEl];\n  localtimeEl = document.getElementById('localtime');\n  utctimeEl = document.getElementById('utctime'); // NAV SECTIONS\n\n  launchSection = document.getElementById(\"launch-section\");\n  timestampSection = document.getElementById(\"timestamp-section\");\n  practiceSection = document.getElementById(\"practice-section\");\n  navSections = [launchSection, timestampSection, practiceSection]; // NAV BTN/SECTION INDEXES\n\n  launchIndex = 0;\n  timestampIndex = 1;\n  practiceIndex = 2; // TIMESTAMP\n\n  timestampGen = document.getElementById('timestamp-gen');\n  timestampPrompt = document.getElementById('timestamp-prompt');\n  timestampQuestion = document.getElementById('timestamp-question');\n  timestampInputYr = document.getElementById('timestamp-input-yr');\n  timestampInputMon = document.getElementById('timestamp-input-mon');\n  timestampInputDt = document.getElementById('timestamp-input-dt');\n  timestampInputHr = document.getElementById('timestamp-input-hr');\n}\n\nfunction setElementProps() {\n  launchBtnEl.onclick = launchQuiz;\n  timestampBtnEl.onclick = launchTimestamp;\n  practiceBtnEl.onclick = launchPractice;\n  addOptionsToSelect(timestampInputYr, years);\n  addOptionsToSelect(timestampInputMon, monthNums);\n  addOptionsToSelect(timestampInputDt, dates);\n  addOptionsToSelect(timestampInputHr, hrs);\n  timestampGen.onclick = nextTimestampQuestion;\n} // QUIZ\n\n\nfunction launchQuiz() {\n  setSectionBtn(launchIndex);\n  setSection(launchIndex);\n  document.getElementById('submit').innerHTML = 'Submit';\n  document.getElementById('submit').onclick = doQuizSubmit;\n  setLaunchPrompt();\n}\n\nfunction toggleQuiz() {\n  if (quizFormEl.style.display === 'none') {\n    quizFormEl.style.display = 'block';\n    startBtnEl.innerHTML = 'Restart';\n    congratsEl.style.display = 'none';\n  } else {\n    quizFormEl.style.display = 'none';\n    startBtnEl.innerHTML = 'Start';\n    resetQuiz();\n  }\n}\n\nfunction resetQuiz() {\n  setCard(0);\n  setLaunchPrompt();\n  clearInput();\n  imgEl.src = 'tardis.png';\n  resetIncorrect();\n}\n\nfunction doQuizSubmit(event) {\n  event.preventDefault();\n  var answer = sanitizeAnswer();\n\n  if (isCorrect(answer)) {\n    resetIncorrect();\n    cardIndex++;\n\n    if (cardIndex == 5) {\n      congratulate();\n    } else {\n      setNextQuestion();\n    }\n  } else {\n    incorrectEl.style.display = 'block'; // display a message\n    // clear the input\n  }\n}\n\nfunction sanitizeAnswer() {\n  var a = answerEl.value.trim();\n\n  if (a.slice(-1) == ';') {\n    a = a.slice(0, -1);\n  }\n\n  return a;\n}\n\nfunction isCorrect(answer) {\n  for (var i = 0; i < card.answers.length; i++) {\n    if (card.answers[i] === answer) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction setNextQuestion() {\n  imgEl.src = 'tardis' + cardIndex + '.png';\n  card = flashcards[cardIndex];\n  setLaunchPrompt();\n  clearInput();\n}\n\nfunction setCard(index) {\n  card = flashcards[index];\n  cardIndex = flashcards.indexOf(card);\n}\n\nfunction setLaunchPrompt() {\n  document.getElementById('launch-prompt').innerHTML = card.prompt;\n}\n\nfunction clearInput() {\n  answerEl.value = '';\n}\n\nfunction congratulate() {\n  imgEl.src = 'tardis5.png';\n  congratsEl.style.display = 'block';\n  toggleQuiz();\n}\n\nfunction resetIncorrect() {\n  incorrectEl.style.display = 'none';\n} // TIMESTAMPS @ RANDOM\n\n\nvar timestamp = {\n  input: null,\n  output: null\n};\n\nfunction launchTimestamp() {\n  setSectionBtn(timestampIndex);\n  setSection(timestampIndex);\n}\n\nfunction nextTimestampQuestion() {\n  setTimestampQuestion();\n  timestampPrompt.innerHTML = timestamp.input;\n  timestampQuestion.innerHTML = getRandomTimestampQuestion(); // Set to HTML\n  // prompt: innerHtml = \"let date = new Date(\" + currentTimestampQ.input \");\"\n  // answer: innerHtml = currentTimestampQ.output\n}\n\nfunction setTimestampQuestion() {\n  var types = ['string', 'number', 'now', 'utc'];\n  var t = types[getRandomInt(4)];\n  var input = null;\n  var inputStr = null;\n  var output = null;\n\n  if (t == 'string') {\n    inputStr = getRandomTimestampStringInput();\n    input = 'new Date(' + inputStr + ');';\n    output = new Date(inputStr);\n  } else if (t == 'now') {\n    input = 'Date.now()';\n    output = Date.now();\n  } else {\n    var ints = getRandomTimstampNumberInput();\n    var intStrs = transformIntsToDblDigStrs(ints);\n    inputStr = intStrs[0] + ', ' + intStrs[1] + ', ' + intStrs[2] + ', ' + intStrs[3] + ', ' + intStrs[4] + ', ' + intStrs[5];\n\n    if (t == 'number') {\n      input = 'new Date(' + inputStr + ');';\n      output = new Date(ints[0], ints[1], ints[2], ints[3], ints[4], ints[5]);\n    } else {\n      input = 'Date.UTC(' + inputStr + ');';\n      output = Date.UTC(ints[0], ints[1], ints[2], ints[3], ints[4], ints[5]);\n    }\n  }\n\n  setCTQInput(input);\n  setCTQOutput(output);\n}\n\nfunction getRandomTimstampNumberInput() {\n  var intArr = [];\n\n  for (var i = 0; i < 6; i++) {\n    var dig = null;\n\n    if (i == 0) {\n      dig = getRandomInt(51, 1970); // year\n    } else if (i == 1) {\n      dig = getRandomInt(12); // month\n    } else if (i == 2) {\n      dig = getRandomInt(31); // day\n    } else if (i == 3) {\n      dig = getRandomInt(12); // hour\n    } else {\n      dig = getRandomInt(60); // min & sec\n    }\n\n    intArr.push(dig);\n  }\n\n  return intArr;\n}\n\nfunction getRandomTimestampStringInput() {\n  var types = ['iso', 'iso-time-z', 'iso-time-rel', 'short', 'long'];\n  var type = types[getRandomInt(4)];\n\n  if (type == 'iso') {\n    return \"\\\"\".concat(getRandomIsoDtStr(), \"\\\"\");\n  } else if (true) {\n    return \"\\\"\".concat(getRandomIsoDtTimeStr(), \"\\\"\");\n  } else {}\n}\n\nfunction getRandomTimestampQuestion() {\n  var questions = [\"What year, month, date, and hour will the method .toUTCString() return using the Date object created above?\", \"What year, month, date, and hour will show when the Date object created above is printed using console.log()?\"];\n  return questions[getRandomInt(2)];\n}\n\nfunction setCTQInput(input) {\n  timestamp.input = input;\n}\n\nfunction setCTQOutput(output) {\n  timestamp.output = output;\n} // PRACTICE\n\n\nfunction launchPractice() {\n  setSectionBtn(practiceIndex);\n  setSection(practiceIndex);\n  localtimeEl.innerHTML = localtimeStr;\n  utctimeEl.innerHTML = utctimeStr;\n} // UTILS\n\n\nfunction setSectionBtn(navBtnIndex) {\n  for (var i = 0; i < navBtns.length; i++) {\n    if (navBtns[i].classList.contains('selected')) {\n      navBtns[i].classList.remove('selected');\n    }\n  }\n\n  navBtns[navBtnIndex].classList.add('selected');\n}\n\nfunction setSection(navSectionIndex) {\n  for (var i = 0; i < navSections.length; i++) {\n    if (navSections[i].style.display != 'none') {\n      navSections[i].style.display = 'none';\n    }\n  }\n\n  navSections[navSectionIndex].style.display = 'block';\n}\n\nfunction getRandomInt(max, offset) {\n  if (offset == null) {\n    offset = 0;\n  }\n\n  return Math.floor(Math.random() * max) + offset;\n}\n\nfunction addOptionsToSelect(selectEl, options) {\n  var _iterator = _createForOfIteratorHelper(options),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var opt = _step.value;\n      var option = document.createElement(\"option\");\n      option.value = opt;\n      option.innerHTML = opt;\n      selectEl.add(option);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nfunction transformIntsToDblDigStrs(ints) {\n  var newIntStrs = [];\n\n  var _iterator2 = _createForOfIteratorHelper(ints),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _int = _step2.value;\n      var newIntStr = _int < 10 ? transformIntToDblDigitStr(_int) : _int;\n      newIntStrs.push(newIntStr);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return newIntStrs;\n}\n\nfunction getRandomIsoDtStr() {\n  var i = getRandomInt(3);\n\n  if (i == 0) {\n    return \"\".concat(getRandomInt(51, 1970), \"-\").concat(transformIntToDblDigitStr(getRandomInt(13, 1)), \"-\").concat(transformIntToDblDigitStr(getRandomInt(31)));\n  } else if (i == 1) {\n    return \"\".concat(getRandomInt(51, 1970), \"-\").concat(transformIntToDblDigitStr(getRandomInt(13, 1)));\n  } else {\n    return \"\".concat(getRandomInt(51, 1970));\n  }\n}\n\nfunction getRandomIsoDtTimeStr() {\n  return \"\".concat(getRandomIsoDtStr()).concat(getRandomInt(2) == 0 ? 'T' : ' ').concat(getRandomTime()).concat(getRandomInt(2) == 0 ? 'Z' : '');\n}\n\nfunction getRandomIsoDtTimeRelStr() {\n  return \"\".concat(getRandomIsoDtTimeStr()).concat(getRandomTimeOffset());\n}\n\nfunction getRandomTime() {\n  var arr = [];\n  var ln = getRandomInt(3, 2);\n\n  for (var i = 0; i < ln; i++) {\n    var _int2 = null;\n\n    if (i == 0) {\n      _int2 = getRandomInt(25);\n    } else {\n      _int2 = getRandomInt(60);\n    }\n\n    arr.push(_int2 < 10 ? transformIntToDblDigitStr(_int2) : _int2);\n  }\n\n  return ln == 2 ? \"\".concat(arr[0], \":\").concat(arr[1]) : \"\".concat(arr[0], \":\").concat(arr[1], \":\").concat(arr[2]);\n}\n\nfunction getRandomTimeOffset() {\n  var arr = [];\n\n  for (var i = 0; i < 2; i++) {\n    var _int3 = null;\n\n    if (i == 0) {\n      _int3 = getRandomInt(25);\n    } else {\n      _int3 = getRandomInt(60);\n    }\n\n    arr.push(transformIntToDblDigitStr(_int3));\n  }\n\n  return \"\".concat(getRandomInt(2) == 0 ? '+' : '-').concat(arr[0], \":\").concat(arr[1]);\n}\n\nfunction transformIntToDblDigitStr(_int4) {\n  return _int4.toLocaleString('en-US', {\n    minimumIntegerDigits: 2\n  });\n}\n\nfunction getRandomShortDtString() {// Short: MM/DD/YYYY\n}\n\nfunction getRandomLongDtString() {// Long: Mon DD YYYY\n  // Long2: DD Mon YYYY\n  // Long3: Month DD YYYY\n  // Long4: DD Month YYYY\n}\n\n//# sourceURL=webpack://my-webpack-project/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;